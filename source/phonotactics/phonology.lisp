(in-package #:mang)

(defun parse-binary-feature-definition ()
  (>>!
    name (parse-identifier *mang-reserved-symbols*)
    _ (>> (parse-whitespace)
          (parse-constant ":")
          (parse-whitespace)
          (parse-constant "binary"))
    (succeed name)))

(defun parse-valued-feature-definition ()
  (>>!
    name (parse-identifier *mang-reserved-symbols*)
    _ (>> (parse-whitespace)
          (parse-constant ":")
          (parse-whitespace)
          (parse-constant "valued")
          (parse-whitespace)
          (parse-constant ":=")
          (parse-whitespace))
    value (parse-identifier *mang-reserved-symbols*)
    values (many (>> (parse-whitespace)
                     (parse-constant ",")
                     (parse-whitespace)
                     (parse-identifier *mang-reserved-symbols*))
                 (empty-set)
                 (lambda (value values)
                   (with values value)))
    (succeed `(,name ,(with values value)))))

(defun parse-privative-feature-definition ()
  (>>!
    name (parse-identifier *mang-reserved-symbols*)
    _ (>> (parse-whitespace)
          (parse-constant ":")
          (parse-whitespace)
          (parse-constant "privative"))
    (succeed name)))

(defun parse-feature-definition ()
  (// (<$> (parse-binary-feature-definition)
           (lambda (definition)
             `(,(set definition)
                ,(empty-map (empty-set))
                ,(empty-set))))
      (<$> (parse-valued-feature-definition)
           (lambda (definition)
             (bind (((name values)
                     definition))
               `(,(empty-set)
                  ,(map (name values))
                  ,(empty-set)))))
      (<$> (parse-privative-feature-definition)
           (lambda (definition)
             `(,(empty-set)
                ,(empty-map (empty-set))
                ,(set definition))))))

(defun parse-glyph-definition (features valued-features)
  (>>!
    _ (parse-whitespace)
    name (parse-identifier *mang-reserved-symbols*)
    _ (>> (parse-whitespace)
          (parse-constant ":=")
          (parse-whitespace))
    (feature value)
    (// (>>!
          sign (// (<$ (parse-constant "+")
                       t)
                   (<$ (parse-constant "-")
                       nil))
          _ (parse-whitespace)
          feature (parse-identifier *mang-reserved-symbols*) 
          (if (@ features feature)
              (succeed `(,feature ,sign))
              (fail `(:unknown-binary-feature ,feature ,sign))))
        (>>!
          feature (parse-identifier *mang-reserved-symbols*)
          _ (>> (parse-whitespace)
                (parse-constant "=")
                (parse-whitespace))
          value (parse-identifier *mang-reserved-symbols*)
          ([a]if (@ valued-features feature)
              (if (@ it value)
                  (succeed `(,feature ,value))
                  (fail `(:unknown-feature-value ,feature ,value)))
            (fail `(:unknown-valued-feature ,feature ,value)))))
    _ (parse-whitespace)
    features
    (many (>> (parse-whitespace)
              (parse-constant ",")
              (parse-whitespace)
              (// (>>!
                    sign (// (<$ (parse-constant "+")
                                 t)
                             (<$ (parse-constant "-")
                                 nil))
                    _ (parse-whitespace)
                    feature (parse-identifier *mang-reserved-symbols*)
                    (if (@ features feature)
                        (succeed `(,feature ,sign))
                        (fail `(:unknown-binary-feature ,feature ,sign))))
                  (>>!
                    _ (parse-whitespace)
                    feature (parse-identifier *mang-reserved-symbols*)
                    _ (>> (parse-whitespace)
                          (parse-constant "=")
                          (parse-whitespace))
                    value (parse-identifier *mang-reserved-symbols*)
                    ([a]if (@ valued-features feature)
                        (if (@ it value)
                            (succeed `(,feature ,value))
                            (fail `(:unknown-feature-value ,feature ,value)))
                      (fail `(:unknown-valued-feature ,feature ,value))))))
          (empty-map)
          (lambda (feature features)
            (bind (((name value)
                    feature))
              (with features name value))))
    _ (parse-expression-end)
    (succeed `(,name ,(with features feature value)))))
