(in-package #:mang)

(defun parse-binary-feature-definition ()
  (>>!
    name (parse-identifier *mang-reserved-symbols*)
    _ (>> (parse-whitespace)
          (parse-constant ":")
          (parse-whitespace)
          (parse-constant "binary")
          (parse-expression-end))
    (succeed name)))

(defun parse-valued-feature-definition ()
  (>>!
    name (parse-identifier *mang-reserved-symbols*)
    _ (>> (parse-whitespace)
          (parse-constant ":")
          (parse-whitespace)
          (parse-constant "valued")
          (parse-whitespace)
          (parse-constant ":=")
          (parse-whitespace))
    value (parse-identifier *mang-reserved-symbols*)
    values (some (>> (parse-whitespace)
                     (parse-constant ",")
                     (parse-whitespace)
                     (parse-identifier *mang-reserved-symbols*))
                 (empty-set)
                 (lambda (value values)
                   (with values value)))
    _ (parse-expression-end)
    (succeed `(,name ,(with values value)))))

(defun parse-feature-definitions ()
  (many (>> (parse-whitespace)
            (// (parse-binary-feature-definition)
                (parse-valued-feature-definition)))
        `(,(empty-set)
           ,(empty-map (empty-set)))
        (lambda (feature features)
          (bind (((constant-features valued-features)
                  features))
            (if (consp feature)
                (bind (((name values)
                        feature))
                  `(,constant-features ,(with valued-features name values)))
                `(,(with constant-features feature)
                   ,valued-features))))))

(defun parse-glyph-definition (features valued-features)
  (>>!
    _ (parse-whitespace)
    name (parse-identifier *mang-reserved-symbols*)
    _ (>> (parse-whitespace)
          (parse-constant ":=")
          (parse-whitespace))
    (feature value)
    (// (>>!
          sign (// (<$ (parse-constant "+")
                       t)
                   (<$ (parse-constant "-")
                       nil))
          _ (parse-whitespace)
          feature (parse-identifier *mang-reserved-symbols*) 
          (if (@ features feature)
              (succeed `(,feature ,sign))
              (fail `(:unknown-binary-feature ,feature ,sign))))
        (>>!
          feature (parse-identifier *mang-reserved-symbols*)
          _ (>> (parse-whitespace)
                (parse-constant "=")
                (parse-whitespace))
          value (parse-identifier *mang-reserved-symbols*)
          ([a]if (@ valued-features feature)
              (if (@ it value)
                  (succeed `(,feature ,value))
                  (fail `(:unknown-feature-value ,feature ,value)))
            (fail `(:unknown-valued-feature ,feature ,value)))))
    _ (parse-whitespace)
    features
    (many (>> (parse-whitespace)
              (parse-constant ",")
              (parse-whitespace)
              (// (>>!
                    sign (// (<$ (parse-constant "+")
                                 t)
                             (<$ (parse-constant "-")
                                 nil))
                    _ (parse-whitespace)
                    feature (parse-identifier *mang-reserved-symbols*)
                    (if (@ features feature)
                        (succeed `(,feature ,sign))
                        (fail `(:unknown-binary-feature ,feature ,sign))))
                  (>>!
                    _ (parse-whitespace)
                    feature (parse-identifier *mang-reserved-symbols*)
                    _ (>> (parse-whitespace)
                          (parse-constant "=")
                          (parse-whitespace))
                    value (parse-identifier *mang-reserved-symbols*)
                    ([a]if (@ valued-features feature)
                        (if (@ it value)
                            (succeed `(,feature ,value))
                            (fail `(:unknown-feature-value ,feature ,value)))
                      (fail `(:unknown-valued-feature ,feature ,value))))))
          (empty-map)
          (lambda (feature features)
            (bind (((name value)
                    feature))
              (with features name value))))
    _ (parse-expression-end)
    (succeed `(,name ,(with features feature value)))))

(defun parse-glyph-definitions (features valued-features)
  (many (>> (parse-whitespace)
            (parse-glyph-definition features valued-features))
        (empty-map (empty-set))
        (lambda (glyph-def glyph-defs)
          (bind (((name features)
                  glyph-def))
            (with glyph-defs name features)))))

(defun parse-category-definition (glyphs)
  (>>!
    _ (parse-whitespace)
    name (parse-identifier *mang-reserved-symbols*)
    _ (>> (parse-whitespace)
          (parse-constant ":=")
          (parse-whitespace))
    glyph (>>!
            name (parse-identifier *mang-reserved-symbols*)
            ([av]if (@ glyphs name)
                (succeed it)
              (fail `(:unknown-glyph ,name))))
    glyphs (many (>>!
                   _ (>> (parse-whitespace)
                         (parse-constant ",")
                         (parse-whitespace))
                   name (parse-identifier *mang-reserved-symbols*)
                   ([av]if (@ glyphs name)
                       (succeed it)
                     (fail `(:unknown-glyph ,name))))
                 '() #'cons)
    _ (parse-expression-end)
    (succeed `(,name (,glyph ,@glyphs)))))

(defun parse-category-definitions (glyphs)
  (many (parse-category-definition glyphs)
        (empty-map (empty-map))
        (lambda (category categories)
          (bind (((name contents)
                  category))
            (with categories name contents)))))

(defun parse-phonology ()
  (>>!
    (binary-features valued-features)
    (parse-feature-definitions)
    glyphs (parse-glyph-definitions binary-features valued-features)
    categories (parse-category-definitions glyphs)
    (succeed `(,binary-features ,valued-features ,glyphs ,categories))))
