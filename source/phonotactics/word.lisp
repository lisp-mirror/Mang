(in-package #:mang)

(defun parse-cluster-definitions (glyphs categories)
  (>>!
    _ (parse-whitespace)
    front (parse-cluster-definition glyphs categories)
    _ (// (parse-expression-end)
          (>> (parse-whitespace)
              (parse-constant "|")
              (parse-whitespace)))
    back (<? (parse-cluster-definitions glyphs categories)
             (empty-set))
    (succeed (with back front))))

(defun parse-clusters-generator (glyphs categories)
  (>>!
    _ (>> (parse-whitespace)
          (parse-constant "#cluster-generator:")
          (parse-expression-end)
          (parse-whitespace))
    (min max)
    (// (>>!
          _ (>> (parse-constant "#min:")
                (parse-whitespace))
          min (>>!
                min (parse-number)
                _ (parse-expression-end)
                (succeed (parse-integer min)))
          max (>>!
                _ (>> (parse-whitespace)
                      (parse-constant "#max:")
                      (parse-whitespace))
                max (parse-number)
                _ (parse-expression-end)
                ([d]if (>= (parse-integer max)
                           min)
                    (succeed (parse-integer max))
                  (fail `(:malformed-word-length ,min ,max))))
          (succeed `(,min ,max)))
        (>> (parse-constant "#count:")
            (parse-whitespace)
            (>>!
              count (parse-number)
              _ (parse-expression-end)
              (succeed (bind ((count (parse-integer count)))
                         `(,count ,count))))))
    _ (>> (parse-whitespace)
          (parse-constant "#begin:")
          (parse-newline))
    begin (parse-cluster-definitions glyphs categories)
    _ (>> (parse-whitespace)
          (parse-constant "#mid:")
          (parse-newline))
    mid (parse-cluster-definitions glyphs categories)
    _ (>> (parse-whitespace)
          (parse-constant "#end:")
          (parse-newline))
    end (parse-cluster-definitions glyphs categories)
    _ (>> (parse-whitespace)
          (parse-constant "#nuclei:")
          (parse-newline))
    nuclei (parse-cluster-definitions glyphs categories)
    _ (parse-expression-end)
    (succeed (dfsm<- (image (lambda (count)
                              (list begin (intersperse mid (repeat count
                                                                   nuclei))
                                    end))
                            (convert 'set
                                     (loop :for count :from min :to max
                                        :collect count)))))))

(defun load-generator (file glyphs)
  (with-open-file (stream file)
    (parser-call (>>!
                   categories (parse-category-definitions glyphs)
                   generator (// (parse-syllables-generator glyphs categories)
                                 (parse-clusters-generator glyphs categories))
                   _ (>> (parse-whitespace)
                         (parse-eof))
                   (succeed generator))
                 stream)))

(defmethod string<-word ((word cons)
                         (glyphs map))
  (format nil "~{~A~}"
          (image (lambda (phoneme)
                   (arb (origin phoneme glyphs)))
                 word)))
