(in-package #:mang)

(defun parse-full-existing-gloss (dictionary)
  (bind ((parts-of-speech (domain dictionary)))
    (>>!
      pos (parse-from-set parts-of-speech)
      _ (parse-constant ":")
      gloss (parse-from-set (domain (@ dictionary pos)))
      (succeed `(:gloss ,pos ,gloss)))))

(defun parse-part-of-speech (dictionary)
  (>>!
    pos (parse-wrapped (parse-constant "[")
                       (parse-from-set (domain dictionary))
                       (parse-constant "]"))
    register (parse-number)
    (succeed `(:register ,register (:part-of-speech ,pos)))))

(defun parse-semantic-shift-source (dictionary)
  (parse-sequence (// (<$> (parse-full-existing-gloss dictionary)
                           (lambda (gloss)
                             `(,gloss ,(empty-set))))
                      (<$> (parse-part-of-speech dictionary)
                           (lambda (pos)
                             `(,pos ,(set (second pos))))))
                  (>> (parse-whitespace)
                      (parse-constant "+")
                      (parse-whitespace))
                  `(()
                    ,(empty-set))
                  (lambda (spec acc)
                    (spread (cons union)
                      spec acc))))

(defun parse-semantic-shift-target (dictionary registers)
  (>>!
    pos (parse-from-set (domain dictionary))
    _ (parse-constant ":")
    target-namer (some (// (<$> (parse-wrapped (parse-constant "[")
                                               (>>!
                                                 register (parse-number)
                                                 (if (@ registers register)
                                                     (succeed register)
                                                     (fail `(:invalid-register
                                                             ,register
                                                             ,registers))))
                                               (parse-constant "]"))
                                (lambda (register)
                                  `(:register ,register)))
                           ;; doesn't parse numbers in the identifier,
                           ;; apparently
                           (parse-gloss))
                       '() #'cons)
    (succeed `(,pos ,@target-namer))))

(defun parse-semantic-shift (source-language)
  (bind ((dictionary (map-union (dictionary<- source-language)
                                (unknown-dictionary<- source-language)
                                #'map-union)))
    (>>!
      (source-glosses registers)
      (parse-semantic-shift-source dictionary)
      _ (>> (parse-whitespace-no-newline)
            (parse-constant "=>")
            (parse-whitespace-no-newline))
      target (parse-semantic-shift-target dictionary registers)
      _ (parse-whitespace-no-newline)
      word-categories
      (<? (parse-w/s (>> (parse-constant "{")
                         (parse-whitespace))
                     (parse-from-set (domain (markov-spec<- source-language)))
                     (>> (parse-whitespace)
                         (parse-constant ",")
                         (parse-whitespace))
                     (>> (parse-whitespace)
                         (parse-constant "}"))
                     (empty-set)
                     (lambda (cat cats)
                       (with cats cat)))
          (empty-set))
      (succeed `(,source-glosses ,target ,word-categories)))))

(defun parse-drop-gloss (language)
  (>>!
    gloss (parse-full-existing-gloss (map-union (dictionary<- language)
                                                (unknown-dictionary<- language)
                                                #'map-union))
    _ (>> (parse-whitespace-no-newline)
          (parse-constant "#"))
    (succeed `(:drop ,gloss))))
