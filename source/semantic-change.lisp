(in-package #:mang)

(defun parse-full-existing-gloss (dictionary)
  (bind ((parts-of-speech (domain dictionary)))
    (>>!
      pos (parse-from-set parts-of-speech)
      _ (parse-constant ":")
      gloss (parse-from-set (domain (@ dictionary pos)))
      (succeed `(:gloss ,pos ,gloss)))))

(defun parse-part-of-speech (dictionary)
  (>>!
    pos (parse-wrapped (parse-constant "[")
                       (parse-from-set (domain dictionary))
                       (parse-constant "]"))
    register (parse-number)
    (succeed `(:register ,register (:part-of-speech ,pos)))))

(defun parse-semantic-shift-target ()
  (some (// (<$> (parse-wrapped (parse-constant "[")
                                (parse-number)
                                (parse-constant "]"))
                 (lambda (register)
                   `(:register ,register)))
            (parse-identifier (set "-" "[" "]")))
        '() #'cons))

(defun parse-semantic-shift (source-language target-language)
  (bind ((dictionary (map-union (dictionary<- source-language)
                                (unknown-dictionary<- source-language)
                                #'map-union)))
    (>>!
      source-glosses
      (parse-sequence (// (parse-full-existing-gloss dictionary)
                          (parse-part-of-speech dictionary))
                      (>> (parse-whitespace)
                          (parse-constant "+")
                          (parse-whitespace)))
      _ (>> (parse-whitespace-no-newline)
            (parse-constant "=>")
            (parse-whitespace-no-newline))
      target (parse-semantic-shift-target)
      _ (parse-whitespace-no-newline)
      word-categories
      (<? (parse-w/s (>> (parse-constant "{")
                         (parse-whitespace))
                     (parse-from-set (domain (markov-spec<- target-language)))
                     (>> (parse-whitespace)
                         (parse-constant ",")
                         (parse-whitespace))
                     (>> (parse-whitespace)
                         (parse-constant "}"))
                     (empty-set)
                     (lambda (cat cats)
                       (with cats cat)))
          (empty-set))
      (succeed `(:semantic-shift ,source-glosses ,target ,word-categories)))))

(defun parse-drop-gloss (language)
  (>>!
    gloss (parse-full-existing-gloss (map-union (dictionary<- language)
                                                (unknown-dictionary<- language)
                                                #'map-union))
    _ (>> (parse-whitespace-no-newline)
          (parse-constant "=>")
          (parse-whitespace-no-newline)
          (parse-constant "#"))
    (succeed `(:drop ,gloss))))
