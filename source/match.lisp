(in-package #:mang)

(defadt [pattern]
  (<exactly> [glyph] [pattern])
  (<this> [pattern])
  (<any> [pattern])
  <end>)

(defmatch size ([pattern])
    (integer 0)
  (<end>
   0)
  ((<any> p)
   (1+ (size p)))
  ((<this> p)
   (1+ (size p)))
  ((<exactly> _ p)
   (1+ (size p))))

(defmatch compare ([pattern] [pattern])
    (member :less :equal :greater)
  ((<end> <end>)
   :equal)
  ((<end> _)
   :less)
  ((_ <end>)
   :greater)
  (((<any> p1)
    (<any> p2))
   (compare p1 p2))
  (((<any> _)
    _)
   :less)
  ((_ (<any> _))
   :greater)
  (((<this> p1)
    (<this> p2))
   (compare p1 p2))
  (((<this> _)
    _)
   :less)
  ((_ (<this> _))
   :greater)
  (((<exactly> g1 p1)
    (<exactly> g2 p2))
   (case (compare g1 g2)
     (:less :less)
     (:greater :greater)
     (:equal
      (compare p1 p2)))))
  

(defadt [match]
  (<m-this> [glyph] [match])
  (<m-any> [match])
  <m-end>
  <nomatch>)

(defmatch size ([match])
    (integer 0)
  (<nomatch>
   0)
  (<m-end>
   0)
  ((<m-any> m)
   (1+ (size m)))
  ((<m-this> _ m)
   (1+ (size m))))

(defmatch compare ([match] [match])
    (member :less :equal :greater)
  ((<nomatch> <nomatch>)
   :equal)
  ((<nomatch> _)
   :less)
  ((_ <nomatch>)
   :greater)
  ((<m-end> <m-end>)
   :equal)
  ((<m-end> _)
   :less)
  ((_ <m-end>)
   :greater)
  (((<m-any> m1)
    (<m-any> m2))
   (compare m1 m2))
  (((<m-any> _)
    _)
   :less)
  ((_ (<m-any> _))
   :greater)
  (((<m-this> g1 m1)
    (<m-this> g2 m2))
   (ecase (compare g1 g2)
     (:less :less)
     (:greater :greater)
     (:equal (compare m1 m2)))))

(defmatch match? ([match] [rope])
    boolean
  ((<nomatch> _)
   nil)
  ((<m-end> _)
   t)
  ((_ <norope>)
   nil)
  (((<m-any> m)
    r)
   (match? m (sub-rope r 1 (size r))))
  (((<m-this> g m)
    r)
   (and (equal? g (rope-elt r 0))
        (match? m (sub-rope r 1 (size r))))))
