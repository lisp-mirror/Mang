(in-package #:mang)

;;;; Dwarf data
(defparameter *urwormdwarf-phonemes*
  (glyph-system (map ('c (set "b" "d" "m" "n" "v" "z" "g" "ň" "r"))
                     ('begin (set "b" "d" "m" "n" "v" "g" "ň" "x"))
                     ('end (set "m" "n" "ň" "r" "x"))
                     ('v (set "y" "å" "u"))
                     ('cv (set "ÿ" "o" "ü")))))

(defparameter *urwormdwarf-words*
  (word-system (set (list 1 1 `(begin ,(set 'v 'cv)
                                      ,(set 'end nil)))
                    (list 1 1 `(begin ,(set 'v 'cv))
                          0 1 `(c v ,(set 'end nil)))
                    (list 1 1 `(begin ,(set 'v 'cv))
                          1 1 `(c v)
                          0 1 `(c ,(set 'v 'cv)
                                  ,(set 'end nil))))
               *urwormdwarf-phonemes*))

(defparameter *urwormdwarf-store*
  (let ((template (set (match-everything-generator)
                       (match-outro-generator 1)
                       (match-outro-generator 1)
                       (match-outro-generator 2 :ignore-glyphs (set ""))
                       (match-outro-generator 3 :ignore-glyphs (set ""))
                       (match-outro-generator 4 :ignore-glyphs (set ""))))
        (dist (uniform-distribution (glyphs<- *urwormdwarf-phonemes*))))
    (map (:noun
          (learner template dist))
         (:verb
          (learner template dist))
         (:particle
          (learner template dist))
         (:number
          (learner template dist))
         (:adjective
          (learner template dist))
         (:everything
          (learner template dist))
         (:beautiful
          (learner template dist))
         (:ugly
          (learner template dist)))))

(defparameter *urwormdwarf-nouns*
  (learning-markov (& *urwormdwarf-store*)
                   (set :everything :noun)
                   :negative (set :verb)))
(learn *urwormdwarf-nouns* '("n" "y" "" "z" "å" "" "v" "u"))
(learn *urwormdwarf-nouns* '("x" "å" "" "m" "y" "m"))
(learn *urwormdwarf-nouns* '("x" "ü" "" "v" "u" "m"))
(learn *urwormdwarf-nouns* '("d" "å" "" "m" "y"))
(learn *urwormdwarf-nouns* '("x" "ü" "" "v" "y" "r"))
(learn *urwormdwarf-nouns* '("m" "u" "" "x" "å"))
(learn *urwormdwarf-nouns* '("b" "å" "" "r" "y" "ň"))
(learn *urwormdwarf-nouns* '("v" "å" "" "ň" "å"))
(learn *urwormdwarf-nouns* '("d" "u" "" "v" "y" "r"))
(learn *urwormdwarf-nouns* '("x" "å" "" "b" "å" "x"))
(learn *urwormdwarf-nouns* '("g" "o" "" "m" "å" "" "d" "u" "m"))
(learn *urwormdwarf-nouns* '("v" "å" "" "m" "u" "" "d" "u" "m"))
(learn *urwormdwarf-nouns* '("ň" "u" "" "r" "u" "r"))
(learn *urwormdwarf-nouns* '("m" "ÿ" "" "g" "å" "m"))
(learn *urwormdwarf-nouns* '("m" "å" "" "ň" "" "å" "r"))

(defparameter *urwormdwarf-verbs*
  (learning-markov (& *urwormdwarf-store*)
                   (set :everything :verb)
                   :negative (set :noun)))
(learn *urwormdwarf-verbs* '("d" "u" "" "g" "å" "r"))
(learn *urwormdwarf-verbs* '("m" "u" "" "b" "å" "x"))
(learn *urwormdwarf-verbs* '("ň" "å" "" "d" "y" "" "z" "u" "n"))
(learn *urwormdwarf-verbs* '("m" "ÿ" "r"))
(learn *urwormdwarf-verbs* '("v" "y" "" "g" "å" "r"))
(learn *urwormdwarf-verbs* '("m" "o" "" "v" "å" "m"))
(learn *urwormdwarf-verbs* '("b" "ÿ" "" "g" "å" "x"))
(learn *urwormdwarf-verbs* '("d" "u" "r"))
(learn *urwormdwarf-verbs* '("g" "u" "" "z" "y" "x"))
(learn *urwormdwarf-verbs* '("m" "o" "x"))
(learn *urwormdwarf-verbs* '("m" "u" "m"))
(learn *urwormdwarf-verbs* '("v" "ÿ" "" "z" "u" "n"))
(learn *urwormdwarf-verbs* '("b" "å" "" "g" "u" "" "r" "y" "ň"))
(learn *urwormdwarf-verbs* '("b" "y" "x"))
(learn *urwormdwarf-verbs* '("v" "å" "" "x" "u" "" "r" "y" "ň"))
(learn *urwormdwarf-verbs* '("d" "u" "" "d" "u" "" "m" "y"))
(learn *urwormdwarf-verbs* '("d" "u" "" "v" "å" "" "g" "o" "r"))
(learn *urwormdwarf-verbs* '("m" "o" "" "g" "u"))
(learn *urwormdwarf-verbs* '("g" "u" "" "r" "y" "x"))
(learn *urwormdwarf-verbs* '("m" "å" "" "d" "u" "m"))
(learn *urwormdwarf-verbs* '("b" "u" "r"))
(learn *urwormdwarf-verbs* '("v" "u" "" "d" "u" "m"))
(learn *urwormdwarf-verbs* '("x" "u" "" "g" "å" "" "r" "y" "ň"))
(learn *urwormdwarf-verbs* '("ň" "o" "" "d" "u" "" "r" "u" "r"))
(learn *urwormdwarf-verbs* '("d" "u" "" "m" "y" "x"))

(defparameter *urwormdwarf-particles*
  (learning-markov (& *urwormdwarf-store*)
                   (set :everything)
                   :negative (set :particle :number)
                   :learn (set :everything :particle)))
(learn *urwormdwarf-particles* '("v" "å"))
(learn *urwormdwarf-particles* '("x" "y"))
(learn *urwormdwarf-particles* '("ň" "u"))
(learn *urwormdwarf-particles* '("ň" "å" "x"))

(learn *urwormdwarf-particles* '("d" "u"))
(learn *urwormdwarf-particles* '("ň" "u" "n"))
(learn *urwormdwarf-particles* '("d" "u" "m"))
(learn *urwormdwarf-particles* '("ň" "y"))
(learn *urwormdwarf-particles* '("b" "y" "m"))
(learn *urwormdwarf-particles* '("d" "y" "r"))
(learn *urwormdwarf-particles* '("x" "u" "r"))
(learn *urwormdwarf-particles* '("m" "u" "" "r" "y" "ň"))
(learn *urwormdwarf-particles* '("d" "o" "" "b" "å"))
(learn *urwormdwarf-particles* '("b" "o" "" "m" "å" "ň"))
(learn *urwormdwarf-particles* '("x" "å"))
(learn *urwormdwarf-particles* '("x" "y" "ň"))
(learn *urwormdwarf-particles* '("g" "å" "r"))
(learn *urwormdwarf-particles* '("v" "u" "" "r" "u"))
(learn *urwormdwarf-particles* '("m" "å" "" "g" "å" "m"))
(learn *urwormdwarf-particles* '("v" "u" "" "ň" "u" "r"))
(learn *urwormdwarf-particles* '("v" "u"))
(learn *urwormdwarf-particles* '("n" "å"))

(defparameter *urwormdwarf-numbers*
  (learning-markov (& *urwormdwarf-store*)
                   (set :everything)
                   :negative (set :number :particle)
                   :learn (set :everything :number)))
(learn *urwormdwarf-numbers* '("b" "å"))
(learn *urwormdwarf-numbers* '("v" "y" "m"))
(learn *urwormdwarf-numbers* '("g" "ü" "x"))
(learn *urwormdwarf-numbers* '("ň" "å" "ň"))
(learn *urwormdwarf-numbers* '("m" "å" "" "r" "u"))
(learn *urwormdwarf-numbers* '("g" "o" "" "m" "å" "ň"))
(learn *urwormdwarf-numbers* '("b" "y" "" "d" "u" "m"))
(learn *urwormdwarf-numbers* '("m" "ÿ" "x"))

(defparameter *urwormdwarf-adjectives*
  (learning-markov (& *urwormdwarf-store*)
                   (set :everything :adjective :number)))
(learn *urwormdwarf-adjectives* '("n" "ÿ" "" "m" "u" "r"))
(learn *urwormdwarf-adjectives* '("ň" "å" "" "d" "u"))
(learn *urwormdwarf-adjectives* '("x" "ÿ" "" "m" "y" "n"))
(learn *urwormdwarf-adjectives* '("v" "å" "" "m" "u" "" "m" "y" "x"))
(learn *urwormdwarf-adjectives* '("v" "u" "" "d" "å"))
(learn *urwormdwarf-adjectives* '("v" "ẙ" "x"))
(learn *urwormdwarf-adjectives* '("n" "u" "" "v" "u" "x"))
(learn *urwormdwarf-adjectives* '("g" "u" "" "ň" "å" "m"))
(learn *urwormdwarf-adjectives* '("d" "u" "" "n" "å" "x"))
(learn *urwormdwarf-adjectives* '("x" "å" "" "r" "u" "r"))
(learn *urwormdwarf-adjectives* '("d" "u" "" "r" "u"))
(learn *urwormdwarf-adjectives* '("x" "å" "" "m" "y" "ň"))
(learn *urwormdwarf-adjectives* '("v" "y" "" "z" "y" "" "r" "o" "m"))

;;;; Kobold data – need to be revised
(defparameter *urkobold-phonemes*
  (glyph-system (map ('ldp (set "p̪ʼ" "b̪"))
                     ('rfp (set "ʈʼ" "ɖ"))
                     ('plp (set "cʼ" "ɟ"))
                     ('ldn (set "ɱ"))
                     ('rfn (set "ɳ"))
                     ('blf (set "ɸ" "β"))
                     ('avf (set "s" "z"))
                     ('paf (set "ʃ" "ʒ"))
                     ('rff (set "ʂ" "ʐ"))
                     ('plf (set "ç" "ʝ"))
                     ('rfal (set "ɻ" "ɭ"))
                     ('w (set "ɹ̩" "l̩" "w̩"))
                     ('fv (set "i" "ɛ"))
                     ('cv (set "ə"))
                     ('bv (set "u" "a")))))

(defparameter *urkobold-words*
  (let* ((plosive (set 'ldp 'rfp 'plp))
         (nasal (set 'ldn 'rfn))
         (fricative (set 'blf 'avf 'paf 'rff 'plf))
         (c (set plosive nasal fricative 'rfal))
         (labiodental (set 'ldp 'ldn))
         (retroflex (set 'rfp 'rfn 'rff 'rfal))
         (palatal (set 'plp 'plf))
         (pv (set 'fv 'cv 'bv))
         (fv-c (set labiodental 'ldn))
         (w-c (set labiodental retroflex 'avf 'paf)))
    (word-system (set (list `(,(set c nil)
                               ,pv ,(set c nil)))
                      (list `(,(set fv-c nil)
                               fv ,(set fv-c nil)))
                      (list `(,(set w-c nil)
                               w ,(set w-c nil)))
                      (list `(,(set c nil)
                               ,pv ,c)
                            `(,pv ,(set c nil)))
                      (list `(,(set c nil)
                               ,pv ,(set fv-c nil))
                            `(fv ,(set fv-c nil)))
                      (list `(,(set c nil)
                                ,pv ,(set w-c nil))
                            `(w ,(set w-c nil)))
                      (list `(,(set fv-c nil)
                                fv ,(set fv-c nil))
                            `(,pv ,(set c nil)))
                      (list `(,(set fv-c nil)
                                fv ,fv-c)
                            `(fv ,(set fv-c nil)))
                      (list `(,(set fv-c nil)
                                fv ,(set labiodental nil))
                            `(w ,(set w-c nil)))
                      (list `(,(set w-c nil)
                                w ,(set w-c nil))
                            `(,pv ,(set c nil)))
                      (list `(,(set w-c nil)
                                w ,(set labiodental nil))
                            `(fv ,(set fv-c nil)))
                      (list `(,(set w-c nil)
                                w ,w-c)
                            `(w ,(set w-c nil)))
                      )
                 *urkobold-phonemes*)))

(defparameter *urkobold-store*
  (let ((template (set (match-everything-generator)
                       (match-outro-generator 1)
                       (match-outro-generator 2 :ignore-glyphs (set ""))
                       (match-outro-generator 3 :ignore-glyphs (set ""))
                       (match-outro-generator 4 :ignore-glyphs (set ""))))
        (dist (uniform-distribution (glyphs<- *urkobold-phonemes*))))
    (map (:noun
          (learner template dist))
         (:verb
          (learner template dist))
         (:particle
          (learner template dist))
         (:number
          (learner template dist))
         (:adjective
          (learner template dist))
         (:everything
          (learner template dist))
         (:beautiful
          (learner template dist))
         (:ugly
          (learner template dist)))))

(defparameter *urkobold-nouns*
  (learning-markov (& *urkobold-store*)
                   (set :everything :noun)))

(defparameter *urkobold-verbs*
  (learning-markov (& *urkobold-store*)
                   (set :everything :verb)))

(defparameter *urkobold-particles*
  (learning-markov (& *urkobold-store*)
                   (set :everything)
                   :negative (set :particle)
                   :learn (set :everything :particle)))

(defparameter *urkobold-numbers*
  (learning-markov (& *urkobold-store*)
                   (set :everything)
                   :negative (set :number)
                   :learn (set :everything :number)))

(defparameter *urkobold-adjectives*
  (learning-markov (& *urkobold-store*)
                   (set :everything :adjective)))
